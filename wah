#!/bin/bash
RootDir="/tmp/rootfs"
DBPath="var/lib/wpm"
CacheDir="var/cache/wpm/pkg"
ConfigDir="etc"

if [ "$RootDir" = "/" ]; then	
	DBPath="/$DBPath"
	CacheDir="/$CacheDir"
	ConfigDir="/$ConfigDir/wpm"
else
	DBPath="$RootDir/$DBPath"
	CacheDir="$RootDir/$CacheDir"
	ConfigDir="$RootDir/$ConfigDir/wpm"
fi

export GNUPGHOME="$ConfigDir/gnupg"

if [ ! -d "$GNUPGHOME" ]; then
	mkdir -p "$GNUPGHOME"
fi

SyncDir="$DBPath/sync"
LocalDir="$DBPath/local"
reponame="System"
repourl="https://reisy243.github.io/Weird-OSs/wpm/$reponame"

ERROR(){
	echo -e "\e[0;31mERROR: \e[1;37m$1,\e[0;31m Aborting...\e[0m"
	exit 1
}

if [ -d "$LocalDir" ]; then
	for pkg in $(find $LocalDir -name 'PKGINFO'); do
		source $pkg
		if [ -z "$localname" ]; then
			ERROR "invalid package $(dirname $pkg)"
		fi
		inspkgs+=("$localname")

		if ! [ -z "$localprovides" ]; then
			for prov in ${localprovides[@]}; do
				inspkgs+=("$prov")
			done
		fi
	done
else
	inspkgs=()
fi

nextpkgs=()
nofind=()
WahVer="2.0"

se_wah(){
	if ! [ -f "$SyncDir/$reponame.db" ]; then
		ERROR "use $0 sync"
	fi
	zcat $SyncDir/$reponame.db | {
		block=""
		found="$(ERROR "Package not found: $1")"
		proc=false
		while IFS= read -r line; do
			if [[ $line == PKG:* ]]; then
				proc=true
			fi

			if $proc; then
				block+="$line"$'\n'
			fi

			if [[ $line == ENDPKG ]]; then
				proc=false
				if [ "$(echo "$block" | grep PKG:$1)" = "PKG:$1" ]; then
					found=$block
					break
				else
					IFS=","
					for pkg in $(echo "$block" | grep PROV: | cut -d ':' -f2); do
						if [ "$pkg" = "$1" ]; then
							found="$block"
						fi
					done
				fi
				block=""
			fi
		done
		echo "$found"
	}
}

search_wah(){
	if [ $# -lt 2 ]; then
		ERROR "Use $0 search [pkgs]"
	fi
	for find in $@; do
		if ! [ "$find" = "$1" ]; then
			if ! [ "$find" = "$2" ]; then
				echo
			fi

			wah_tmp=$(se_wah $find)

			if ! [ -z "$(echo "$(se_wah $find)" | grep "^PKG:" | cut -d ':' -f2)" ]; then
				echo -e "\e[0;32mPackage: \e[0;37m$(echo "$wah_tmp" | grep "^PKG:" | cut -d ':' -f2)"
				echo -e "\e[0;32mVersion: \e[0;33m$(echo "$wah_tmp" | grep "^VER:" | cut -d ':' -f2)"
				if ! [ -z "$(echo "$wah_tmp" | grep "^URL:" | sed 's/^URL://')" ]; then
					echo -e "\e[0;32murl: \e[0;37m$(echo "$wah_tmp" | grep "^URL:" | sed 's/^URL://')"
				fi
				echo -e "\e[0;32mArchitecture: \e[0;33m$(echo "$wah_tmp" | grep "^ARCH:" | cut -d ':' -f2)\e[0;37m"
				backIFS="$IFS"
				IFS=","
				echo -e "\e[0;32mLicenses:\e[0;37m"
				for li in $(echo "$wah_tmp" | grep "^LICENSES:" | cut -d ':' -f2); do
					echo "	$li"
				done
				IFS=$backIFS
				if ! [ -z "$(echo "$wah_tmp" | grep "^DESC:" | cut -d ':' -f2)" ]; then
					echo -e "\e[0;32mDescription: \e[0;37m$(echo "$wah_tmp" | grep "^DESC:" | cut -d ':' -f2)"
				fi
				if ! [ -z "$(echo "$wah_tmp" | grep "^DEPS:" | cut -d ':' -f2)" ]; then
					echo -e "\e[0;32mDependencies:\e[0;37m"
					IFS=","
					for dep in $(echo "$wah_tmp" | grep "^DEPS:" | cut -d ':' -f2); do
						echo "	$dep"
					done
				fi
			else
				echo "$(echo "$wah_tmp")"
			fi

			unset wah_tmp
		fi
	done
}

sync_wah(){
	if ! [ -d $SyncDir ]; then
		mkdir -p $SyncDir		
	fi
	cd $SyncDir
	if [ -f "$reponame.db" ]; then
		rm $reponame.db	
	fi
	wget $repourl/$reponame.db -qO $reponame.db	--show-progress
}

extpkg(){
	if [ "${#nofind}" -gt 0 ]; then
		errmsg="Package(s) no found: "
		for nopkg in ${nofind[@]}; do
			if [ "$nopkg" = "${nofind[${#nofind[@]}-1]}" ]; then
				errmsg+="$nopkg"
			else
				errmsg+="$nopkg, "
			fi
		done
		printf "\r\033[K"
		ERROR "$errmsg"
	fi
}

deps_wah(){
	for dep in $@; do
		find=false

		# traduce a paquete normal
		if [[ "$dep" == *">"* ]]; then
			cdep=${dep%%>*}
		else
			if [[ "$dep" == *"="* ]]; then
				cdep=${dep%%=*}
			else
				cdep=$dep
			fi
		fi

		sdep=$(se_wah $cdep)

		if [ -z "$(echo $sdep  | grep '^PKG:' | cut -d ':' -f2)" ]; then
			nofind+=("$cdep")
		else
			agrega=true

			for pkg in ${nextpkgs[@]}; do
				if [ "$pkg" = "$(echo $sdep  | grep '^PKG:' | cut -d ':' -f2)" ]; then
					agrega=false
					break
				fi
			done

			if $agrega; then
				nextpkgs+=("$(echo $sdep  | grep '^PKG:' | cut -d ':' -f2)")
			fi
		fi
	done
	extpkg
}

install_wah(){
	if [ $# -lt 2 ]; then
		ERROR "Use $0 install [pkgs]"
	fi
	if ! [ -f "$SyncDir/$reponame.db" ]; then
		ERROR "use $0 sync"
	fi
	if [ ! -d $CacheDir ]; then
		mkdir -p $CacheDir
	fi
	cd $CacheDir

	shift
	for arg in $@; do
		agrega=true
		for pkg in ${args[@]}; do
			if [ "$pkg" = "$arg" ]; then
				agrega=false
			fi
		done
		if $agrega; then
			args+=("$arg")
		fi
	done
	unset agrega

	for pkg in ${args[@]}; do
		se_pkg="$(se_wah $pkg)"

		if ! [ -z "$(echo "$se_pkg" | grep '^PKG:' | cut -d ':' -f2)" ]; then
			nextpkgs+=("$(echo "$se_pkg" | grep '^PKG:' | cut -d ':' -f2)")
		else
			nofind+=("$pkg")
		fi
	done

	printf "Processing, please wait..."
	extpkg

	for pkg in ${nextpkgs[@]}; do
		deps="$(se_wah $pkg | grep '^DEPS:' | cut -d ':' -f2)"
		if [ ! -z "$deps" ]; then
			IFS=","
			deps_wah $deps
		fi
	done
	printf "\r\033[K"

	echo "The following package(s) will be installed:"
	for ((nxpkg=${#nextpkgs[@]}-1; nxpkg>=0; nxpkg--));do
		echo "	$reponame/${nextpkgs[nxpkg]}"
	done
	printf "Continue with installation [Y/n] "
	read -r confirm
	confirm=$(echo "$confirm" | tr '[:upper:]' '[:lower:]')
	if ! [[ "$confirm" == 'y' || "$confirm" == '' ]]; then
		echo "Exiting..."
		exit 0
	fi

	# Downloading files
	cd $CacheDir
	for ((dlpkg=${#nextpkgs[@]}-1; dlpkg>=0; dlpkg--));do
		downloadfile=$(se_wah ${nextpkgs[dlpkg]} | grep '^FILE:' | cut -d ':' -f2)

		if [ ! -f "$(basename $downloadfile)" ]; then
			wget $repourl/$downloadfile -qO $(basename $downloadfile) --show-progress
		fi

		if [ ! -f "$(basename $downloadfile).sig" ]; then
			wget $repourl/$downloadfile.sig -qO $(basename $downloadfile).sig
		fi
	done

	echo

	for ((pkg=0; pkg<=${#nextpkgs[@]}-1; pkg++));do
		downloadfile=$(basename $(se_wah ${nextpkgs[pkg]} | grep '^FILE:' | cut -d ':' -f2))
		hashpkg=$(se_wah ${nextpkgs[pkg]} | grep '^HASH:')
		if [[ -f "$downloadfile"  &&  -f "$downloadfile.sig" ]]; then
			gpg --verify $downloadfile.sig $downloadfile 2>/dev/null
			gpg_exit_code=$?

			if [ $gpg_exit_code -ne 0 ]; then
				ERROR "Signature verification failed, gpg exit code $gpg_exit_code"
			fi

			case $(echo $hashpkg | cut -d ':' -f2) in
				"SHA256")
					if [ "$(sha256sum $downloadfile | cut -d ' ' -f1)" != "$(echo $hashpkg | cut -d ':' -f3)" ]; then
						printf "\r\033[K"
						ERROR "$downloadfile: checksum don't match"
					fi
				;;
				*)
					printf "\r\033[K"
					ERROR "Unknow hash type: $(echo $hashpkg | cut -d ':' -f2) in"
				;;
			esac

			printf "\rVerifying file integrity, %d of ${#nextpkgs[@]}" $pkg
		else
			ERROR "$downloadfile.sig don't exist"
		fi
	done
	printf "\r\033[KVerifying file integrity, Done!\n"

	for ((extpkg=${#nextpkgs[@]}-1; extpkg>=0; extpkg--));do
		downloadfile=$(basename $(se_wah ${nextpkgs[extpkg]} | grep '^FILE:' | cut -d ':' -f2))

		if [ -f "$downloadfile" ];then
			echo "Installing ${nextpkgs[extpkg]}..."
			for user in $@; do
				if [ "${nextpkgs[extpkg]}" = "$(se_wah $user | grep '^PKG:' | cut -d ':' -f2)" ]; then
					isuser=true
					break;
				else
					isuser=false
				fi
			done

			tar -xf $downloadfile -C $RootDir
			mkdir -p "$LocalDir/${nextpkgs[extpkg]}"
			mv $RootDir/.PKGINFO "$LocalDir/${nextpkgs[extpkg]}/PKGINFO"
			echo "InstalledByUser=$isuser">>$LocalDir/${nextpkgs[extpkg]}/PKGINFO
			if [ -f "$RootDir/.INSTALL" ]; then
				mv $RootDir/.INSTALL "$LocalDir/${nextpkgs[extpkg]}/INSTALL"
			fi
		else
			ERROR "File $downloadfile not found"
		fi
	done
}



if [ $# -lt 1 ]; then
	echo "Usage: $0 [option] <pkg>"
else
	case $1 in
		"install")
			install_wah $@
		;;
		"search")
			search_wah $@
		;;
		"sync")
			sync_wah
		;;
		"se")
			se_wah $2
		;;
		*)
			echo "Unknow option '$1'"
		;;
	esac
fi
# Floppa, floppa poligonal, floppa poligonal dando vueltas, floppa poligonal dando vueltas con daffpunk de fondo
