#!/bin/bash
RootDir="/tmp/rootfs"
DBPath="var/lib/wpm"
CacheDir="var/cache/wpm/pkg"
ConfigDir="etc"

if [ "$RootDir" = "/" ]; then	
	DBPath="/$DBPath"
	CacheDir="/$CacheDir"
	ConfigDir="/$ConfigDir/wpm"
else
	DBPath="$RootDir/$DBPath"
	CacheDir="$RootDir/$CacheDir"
	ConfigDir="$RootDir/$ConfigDir/wpm"
fi

export GNUPGHOME="$ConfigDir/gpg"

SyncDir="$DBPath/sync"
LocalDir="$DBPath/local"
reponame="System"
repourl="https://reisy243.github.io/Weird-OSs/wpm/$reponame"

ERROR(){
	echo -e "\e[0;31mERROR: \e[1;37m$1,\e[0;31m Aborting...\e[0m"
	exit 1
}

if [ -d "$LocalDir" ]; then
	for pkg in $(find $LocalDir -name 'PKGINFO'); do
		source $pkg
		if [ -z "$localname" ]; then
			ERROR "invalid package $(dirname $pkg)"
		fi
		inspkgs+=("$localname")

		if ! [ -z "$localprovides" ]; then
			for prov in ${localprovides[@]}; do
				inspkgs+=("$prov")
			done
		fi
	done

	#inspkgs=($(ls $LocalDir))
else
	inspkgs=()
fi

se_wah(){
	if ! [ -f "$SyncDir/$reponame.db" ]; then
		ERROR "use $0 sync"
	fi
	zcat $SyncDir/$reponame.db | {
		block=""
		found="$(ERROR "Package not found: $1")"
		proc=false
		while IFS= read -r line; do
			if [[ $line == PKG:* ]]; then
				proc=true
			fi

			if $proc; then
				block+="$line"$'\n'
			fi

			if [[ $line == ENDPKG ]]; then
				proc=false
				if [ "$(echo "$block" | grep PKG:$1)" = "PKG:$1" ]; then
					found=$block
					break
				else
					IFS=","
					for pkg in $(echo "$block" | grep PROV: | cut -d ':' -f2); do
						if [ "$pkg" = "$1" ]; then
							found="$block"
						fi
					done
				fi
				block=""
			fi
		done
		echo "$found"
	}
}

search_wah(){
	if [ $# -lt 2 ]; then
		ERROR "Use $0 search [pkgs]"
	fi
	for find in $@; do
		if ! [ "$find" = "$1" ]; then
			if ! [ "$find" = "$2" ]; then
				echo
			fi

			wah_tmp=$(se_wah $find)

			if ! [ -z "$(echo "$(se_wah $find)" | grep "^PKG:" | cut -d ':' -f2)" ]; then
				echo -e "\e[0;32mPackage: \e[0;37m$(echo "$wah_tmp" | grep "^PKG:" | cut -d ':' -f2)"
				echo -e "\e[0;32mVersion: \e[0;33m$(echo "$wah_tmp" | grep "^VER:" | cut -d ':' -f2)"
				if ! [ -z "$(echo "$wah_tmp" | grep "^URL:" | sed 's/^URL://')" ]; then
					echo -e "\e[0;32murl: \e[0;37m$(echo "$wah_tmp" | grep "^URL:" | sed 's/^URL://')"
				fi
				echo -e "\e[0;32mArchitecture: \e[0;33m$(echo "$wah_tmp" | grep "^ARCH:" | cut -d ':' -f2)\e[0;37m"
				if ! [ -z "$(echo "$wah_tmp" | grep "^DESC:" | cut -d ':' -f2)" ]; then
					echo -e "\e[0;32mDescription: \e[0;37m$(echo "$wah_tmp" | grep "^DESC:" | cut -d ':' -f2)"
				fi
				if ! [ -z "$(echo "$wah_tmp" | grep "^DEPS:" | cut -d ':' -f2)" ]; then
					echo -e "\e[0;32mDependencies:\e[0;37m"
					IFS=","
					for dep in $(echo "$wah_tmp" | grep "^DEPS:" | cut -d ':' -f2); do
						echo "	$dep"
					done
				fi
			else
				echo "$(echo "$wah_tmp")"
			fi

			unset wah_tmp
		fi
	done
}

sync_wah(){
	if ! [ -d $SyncDir ]; then
		mkdir -p $SyncDir		
	fi
	cd $SyncDir
	if [ -f "$reponame.db" ]; then
		rm $reponame.db	
	fi
	wget $repourl/$reponame.db -qO $reponame.db	--show-progress
}

install_wah(){
	if [ $# -lt 2 ]; then
		ERROR "Use $0 install [pkgs]"
	fi

	if ! [ -d $CacheDir ]; then
		mkdir -p $CacheDir
	fi
	cd $CacheDir

	pkgs=()
	for pkg in $@; do
		insta=true
		if ! [ "$pkg" = "$1" ]; then
			spkg="$(se_wah $pkg)"

			for installed in ${inspkgs[@]}; do
				if [ "$installed" = "$pkg" ]; then
					insta=false
					echo "$pkg is already installed"
				fi
			done

			if $insta; then
				if ! [ -z "$(echo $spkg | grep '^PKG:' | cut -d ':' -f2)" ]; then
					pkgs+=("$(echo "$spkg" | grep '^PKG:' | cut -d ':' -f2)")

					if ! [ -z "$(echo "$spkg" | grep '^DEPS:' | cut -d ':' -f2)" ]; then
						IFS=","
						deps_wah $(echo "$spkg" | grep '^DEPS:' | cut -d ':' -f2)
					fi
				else
					echo $spkg
					exit 1
				fi
			fi
		fi
	done

	for ((ins=${#pkgs[@]}-1; ins>=0; ins--));do

		downloadfile="$(se_wah ${pkgs[ins]} | grep '^FILE:' | cut -d ':' -f2)"
		if [ -f "$(basename $downloadfile)" ]; then
			rm $(basename $downloadfile)
		fi

		if [ -f "$(basename $downloadfile).sig" ]; then
			rm $(basename $downloadfile).sig
		fi

		wget "$repourl/$downloadfile" -qO $(basename $downloadfile)	--show-progress
		wget "$repourl/$downloadfile.sig" -qO $(basename $downloadfile).sig
	done

	echo

	if [ ! -d "$GNUPGHOME" ]; then
		mkdir -p "$GNUPGHOME"
	fi

	for ((ins=${#pkgs[@]}-1; ins>=0; ins--));do
		downloadfile="$(basename $(se_wah ${pkgs[ins]} | grep '^FILE:' | cut -d ':' -f2))"
		if [ -f "$downloadfile" ] && [ -f "$downloadfile.sig" ]; then
			gpg --verify $downloadfile.sig $downloadfile 2>/dev/null
			gpg_exit_code=$?

			if ! [[ $gpg_exit_code -eq 0 ]]; then
				ERROR "Signature verification failed, exit code $gpg_exit_code"
			fi
		fi
	done

	for ((ins=${#pkgs[@]}-1; ins>=0; ins--));do
		downloadfile="$(basename $(se_wah ${pkgs[ins]} | grep '^FILE:' | cut -d ':' -f2))"
		for usuario in $@; do
			if ! [ "$usuario" = "$1" ]; then
				if [ "$usuario" = "${pkgs[ins]}" ]; then
					user=true
					break
				else
					user=false
				fi
			fi
		done

		if [ -f "$downloadfile" ]; then
			echo "Installing ${pkgs[ins]}..."
			tar -xf $downloadfile -C $RootDir

			mkdir -p "$LocalDir/${pkgs[ins]}"
			mv $RootDir/.PKGINFO "$LocalDir/${pkgs[ins]}/PKGINFO"
			echo "InstalledByUser=$user">>$LocalDir/${pkgs[ins]}/PKGINFO
			if [ -f "$RootDir/.INSTALL" ]; then
				mv $RootDir/.INSTALL "$LocalDir/${pkgs[ins]}/INSTALL"
			fi
		fi
	done

	primero=true
	for ((ins=${#pkgs[@]}-1; ins>=0; ins--));do
			if [ -f "$LocalDir/${pkgs[ins]}/INSTALL" ]; then
				if $primero; then
					echo
					primero=false
				fi
				ins_script=$(cat $LocalDir/${pkgs[ins]}/INSTALL)

				if [ "$RootDir" = "/" ]; then
					exec_ins_script="$ins_script"
				else
					exec_ins_script=$(echo "$ins_script" | sed -E "s|(/[^ ]+)|$RootDir\1|g")
				fi

				cd $RootDir
				source <(echo "$exec_ins_script")
				if type post_install > /dev/null 2>&1; then
					echo "Configuring ${pkgs[ins]}..."
					post_install
				fi
				unset post_install post_upgrade post_remove pre_remove exec_ins_script ins_script
			fi
	done

	unset pkgs
}

deps_wah(){
	for dep in $@; do
		find=false

		# traduce a paquete normal

		if [[ "$dep" == *">"* ]]; then
			cdep=${dep%%>*}
		else
			if [[ "$dep" == *"="* ]]; then
				cdep=${dep%%=*}
			else
				cdep=$dep
			fi
		fi

		# ver si ya esta instalado
		for insdeps in ${inspkgs[@]}; do
			if [ "$insdeps" = "$cdep" ]; then
				find=true
			fi
		done

		# Solo busca si no la a encontrado
		if ! $find; then
			sdep="$(se_wah $cdep | grep '^PKG:' | cut -d ':' -f2)"
			if [ -z "$sdep" ]; then
				ERROR "Dependence '$cdep' not found"
			else
				find=true
				unset sdep
			fi
		fi

		# cuando la encuentre
		agrrega=true
		if $find; then
			if ! [ -z "$sdep" ]; then
				for ya in ${pkgs[@]}; do
					if [ "$sdep" = "$ya" ]; then
						agrrega=false
						break
					fi
				done

				if $agrrega; then
					pkgs+=("$sdep")
				fi
				IFS=","
				for depdep in $(se_wah $sdep | grep '^DEPS:' | cut -d ':' -f2); do
					deps_wah $depdep
				done
				unset IFS
			fi
		fi
		sdep=""
	done
}

if [ $# -lt 1 ]; then
	echo "Usage: $0 [option] <pkg>"
else
	case $1 in
		"install")
			install_wah $@
		;;
		"search")
			search_wah $@
		;;
		"sync")
			sync_wah
		;;
		"se")
			se_wah $2
		;;
		*)
			echo "Unknow option '$1'"
		;;
	esac
fi
# Floppa, floppa poligonal, floppa poligonal dando vueltas, floppa poligonal dando vueltas con daffpunk de fondo
